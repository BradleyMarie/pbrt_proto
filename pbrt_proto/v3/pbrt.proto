syntax = "proto2";

package pbrt_proto.v3;

enum AntialiasingMode {
  CLOSEDFORM = 0;
  NONE = 1;
}

message BlackbodySpectrum {
  required double temperature = 1;
  required double scale = 2;
}

enum ImageWrapping {
  REPEAT = 0;
  BLACK = 1;
  CLAMP = 2;
}

enum Mapping2D {
  UV = 0;
  SPHERICAL = 1;
  CYLINDRICAL = 2;
  PLANAR = 3;
}

enum MeasuredSubsurface {
  APPLE = 0;
  CHICKEN1 = 1;
  CHICKEN2 = 2;
  CREAM = 3;
  KETCHUP = 4;
  MARBLE = 5;
  POTATO = 6;
  SKIMMILK = 7;
  SKIN1 = 8;
  SKIN2 = 9;
  SPECTRALON = 10;
  WHOLEMILK = 11;
  LOWFAT_MILK = 12;
  REDUCED_MILK = 13;
  REGULAR_MILK = 14;
  ESPRESSO = 15;
  MINT_MOCHA_COFFEE = 16;
  LOWFAT_SOY_MILK = 17;
  REGULAR_SOY_MILK = 18;
  LOWFAT_CHOCOLATE_MILK = 19;
  REGULAR_CHOCOLATE_MILK = 20;
  COKE = 21;
  PEPSI = 22;
  SPRITE = 23;
  GATORADE = 24;
  CHARDONNAY = 25;
  WHITE_ZINFANDEL = 26;
  MERLOT = 27;
  BUDWEISER_BEER = 28;
  COORS_LIGHT_BEER = 29;
  CLOROX = 30;
  APPLE_JUICE = 31;
  CRANBERRY_JUICE = 32;
  GRAPE_JUICE = 33;
  RUBY_GRAPEFRUIT_JUICE = 34;
  WHITE_GRAPEFRUIT_JUICE = 35;
  SHAMPOO = 36;
  STRAWBERRY_SHAMPOO = 37;
  HEAD_AND_SHOULDERS_SHAMPOO = 38;
  LEMON_TEA_POWDER = 39;
  ORANGE_POWDER = 40;
  PINK_LEMONADE_POWDER = 41;
  CAPPUCCINO_POWDER = 42;
  SALT_POWDER = 43;
  SUGAR_POWDER = 44;
  SUISSE_MOCHA_POWDER = 45;
  PACIFIC_OCEAN_SURFACE_WATER = 46;
}

message Point {
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message RgbSpectrum {
  required double r = 1;
  required double g = 2;
  required double b = 3;
}

message SampledSpectrum {
  message Sample {
    required double wavelength = 1;
    required double intensity = 2;
  }

  repeated Sample samples = 1;
}

message XyzSpectrum {
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message Vector {
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message Spectrum {
  oneof spectrum_type {
    BlackbodySpectrum blackbody_spectrum = 1;
    RgbSpectrum rgb_spectrum = 2;
    XyzSpectrum xyz_spectrum = 3;
    SampledSpectrum sampled_spectrum = 4;
    string sampled_spectrum_filename = 5;
  }
}

message FloatTextureParameter {
  oneof float_texture_parameter_type {
    double float_value = 1;
    string float_texture_name = 2;
  }
}

message SpectrumTextureParameter {
  oneof spectrum_texture_parameter_type {
    double uniform_spectrum = 1;
    BlackbodySpectrum blackbody_spectrum = 2;
    RgbSpectrum rgb_spectrum = 3;
    XyzSpectrum xyz_spectrum = 4;
    SampledSpectrum sampled_spectrum = 5;
    string sampled_spectrum_filename = 6;
    string spectrum_texture_name = 7;
  }
}

message Accelerator {
  message Bvh {
    enum SplitMethod {
      SAH = 0;
      MIDDLE = 1;
      EQUAL = 2;
      HLBVH = 3;
    }

    optional int32 maxnodeprims = 1 [default = 4];
    optional SplitMethod splitmethod = 2 [default = SAH];
  }

  message KdTree {
    optional int32 intersectcost = 1 [default = 80];
    optional int32 traversalcost = 2 [default = 1];
    optional double emptybonus = 3 [default = 0.5];
    optional int32 maxprims = 4 [default = 1];
    optional int32 maxdepth = 5 [default = -1];
  }

  // If a directive contains an Accelerator with none of these fields set, the
  // renderer should treat that as if `bvh` with the default empty value.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1571
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1654
  oneof accelerator_type {
    Bvh bvh = 1;
    KdTree kdtree = 2;
  }
}

message ActiveTransform {
  enum ActiveTransformation {
    ALL = 1;
    START_TIME = 2;
    END_TIME = 3;
  };

  optional ActiveTransformation active = 1 [default = ALL];
}

message AreaLightSource {
  message Diffuse {
    optional Spectrum L = 1;
    optional bool twosided = 2 [default = false];
    optional int32 samples = 3 [default = 1];
    optional Spectrum scale = 4;
  }

  // If none of these fields are present, subsequent surfaces are not area
  // lights.
  oneof area_light_source_type {
    Diffuse diffuse = 1;
  }
}

message AttributeBegin {
  // Empty Message
}

message AttributeEnd {
  // Empty Message
}

message Camera {
  message ScreenWindow {
    required double x_min = 1;
    required double x_max = 2;
    required double y_min = 3;
    required double y_max = 4;
  }

  message Environment {
    optional double shutteropen = 1 [default = 0.0];
    optional double shutterclose = 2 [default = 1.0];
  }

  message Orthographic {
    optional double lensradius = 1 [default = 0.0];
    optional double focaldistance = 2 [default = 1e6];
    optional double frameaspectratio = 3;  // Must check
    optional ScreenWindow screenwindow = 4;
    optional double shutteropen = 5 [default = 0.0];
    optional double shutterclose = 6 [default = 1.0];
  }

  message Perspective {
    optional double lensradius = 1 [default = 0.0];
    optional double focaldistance = 2 [default = 1e6];
    optional double frameaspectratio = 3;  // Must check
    optional ScreenWindow screenwindow = 4;
    optional double fov = 5 [default = 90.0];
    optional double halffov = 6;  // Must check, overrides fov
    optional double shutteropen = 7 [default = 0.0];
    optional double shutterclose = 8 [default = 1.0];
  }

  message Realistic {
    optional string lensfile = 1 [default = ""];
    optional double aperturediameter = 2 [default = 1.0];
    optional double focaldistance = 3 [default = 10.0];
    optional bool simpleweighting = 4 [default = true];
    optional double shutteropen = 5 [default = 0.0];
    optional double shutterclose = 6 [default = 1.0];
  }

  // If attempting to render with a Camera that does not have one of these
  // fields set, the renderer should render a black image.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1664
  oneof camera_type {
    Environment environment = 1;
    Orthographic orthographic = 2;
    Perspective perspective = 3;
    Realistic realistic = 4;
  }
}

message ConcatTransform {
  required double m00 = 1;
  required double m01 = 2;
  required double m02 = 3;
  required double m03 = 4;
  required double m10 = 5;
  required double m11 = 6;
  required double m12 = 7;
  required double m13 = 8;
  required double m20 = 9;
  required double m21 = 10;
  required double m22 = 11;
  required double m23 = 12;
  required double m30 = 13;
  required double m31 = 14;
  required double m32 = 15;
  required double m33 = 16;
}

message CoordinateSystem {
  required string name = 1;
}

message CoordSysTransform {
  required string name = 1;
}

message Film {
  message Image {
    message CropWindow {
      required double x_min = 1;
      required double x_max = 2;
      required double y_min = 3;
      required double y_max = 4;
    };

    optional int32 xresolution = 1 [default = 1280];
    optional int32 yresolution = 2  [default = 720];
    optional CropWindow cropwindow = 3;
    optional double scale = 4  [default = 1.0];
    optional double maxsampleluminance = 5 [default = inf];
    optional double diagonal = 6 [default = 35.0];
    optional string filename = 7 [default = "pbrt.exr"];
  }


  // If attempting to render to a Film that does not have one of these fields
  // set, the renderer should render a black image.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1720
  oneof film_type {
    Image image = 1;
  }
}

// If attempting to render with a Filter that does not have one of these fields
// set, the renderer should exit immediately with an error.
//
// https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L852
message Filter {
  message Box {
    optional double xwidth = 1 [default = 0.5];
    optional double ywidth = 2 [default = 0.5];
  }

  message Gaussian {
    optional double xwidth = 1 [default = 2.0];
    optional double ywidth = 2 [default = 2.0];
    optional double alpha = 3 [default = 2.0];
  }

  message Mitchell {
    optional double xwidth = 1 [default = 0.5];
    optional double ywidth = 2 [default = 0.5];
    optional double B = 3 [default = 0.333333333333333333];
    optional double C = 4 [default = 0.333333333333333333];
  }

  message Sinc {
    optional double xwidth = 1 [default = 4.0];
    optional double ywidth = 2 [default = 4.0];
    optional double tau = 3 [default = 3.0];
  }

  message Triangle {
    optional double xwidth = 1 [default = 2.0];
    optional double ywidth = 2 [default = 2.0];
  }

  oneof filter_type {
    Box box = 1;
    Gaussian gaussian = 2;
    Mitchell mitchell = 3;
    Sinc sinc = 4;
    Triangle triangle = 5;
  }
}

message FloatTexture {
  required string name = 1;

  message Bilerp {
    optional FloatTextureParameter v00 = 1;
    optional FloatTextureParameter v01 = 2;
    optional FloatTextureParameter v10 = 3;
    optional FloatTextureParameter v11 = 4;
    optional Mapping2D mapping = 5 [default = UV];
    optional double uscale = 6 [default = 1.0];
    optional double vscale = 7 [default = 1.0];
    optional double udelta = 8 [default = 0.0];
    optional double vdelta = 9 [default = 0.0];
    optional Vector v1 = 10;
    optional Vector v2 = 11;
  }

  message Checkerboard2D {
    optional FloatTextureParameter tex1 = 1;
    optional FloatTextureParameter tex2 = 2;
    optional AntialiasingMode aamode = 3 [default = CLOSEDFORM];
    optional Mapping2D mapping = 4 [default = UV];
    optional double uscale = 5 [default = 1.0];
    optional double vscale = 6 [default = 1.0];
    optional double udelta = 7 [default = 0.0];
    optional double vdelta = 8 [default = 0.0];
    optional Vector v1 = 9;
    optional Vector v2 = 10;
  }

  message Checkerboard3D {
    optional FloatTextureParameter tex1 = 1;
    optional FloatTextureParameter tex2 = 2;
  }

  message Constant {
    optional FloatTextureParameter value = 1;
  }

  message Dots {
    optional FloatTextureParameter inside = 1;
    optional FloatTextureParameter outside = 2;
    optional Mapping2D mapping = 3 [default = UV];
    optional double uscale = 4 [default = 1.0];
    optional double vscale = 5 [default = 1.0];
    optional double udelta = 6 [default = 0.0];
    optional double vdelta = 7 [default = 0.0];
    optional Vector v1 = 8;
    optional Vector v2 = 9;
  }

  message FBm {
    optional int32 octaves = 1 [default = 8];
    optional double roughness = 2 [default = 0.5];
  }

  message ImageMap {
    optional string filename = 1 [default = ""];
    optional ImageWrapping wrap = 2 [default = REPEAT];
    optional double maxanisotropy = 3 [default = 8.0];
    optional bool trilinear = 4 [default = false];
    optional double scale = 5 [default = 1.0];
    optional bool gamma = 6;  // Must check, default varies by filetype
    optional Mapping2D mapping = 7 [default = UV];
    optional double uscale = 8 [default = 1.0];
    optional double vscale = 9 [default = 1.0];
    optional double udelta = 10 [default = 0.0];
    optional double vdelta = 11 [default = 0.0];
    optional Vector v1 = 12;
    optional Vector v2 = 13;
  }

  message Marble {
    optional int32 octaves = 1 [default = 8];
    optional double roughness = 2 [default = 0.5];
    optional double scale = 3 [default = 1.0];
    optional double variation = 4 [default = 0.2];
  }

  message Mix {
    optional FloatTextureParameter tex1 = 1;
    optional FloatTextureParameter tex2 = 2;
    optional FloatTextureParameter amount = 3;
  }

  message Ptex {
    optional string filename = 1 [default = ""];
    optional double gamma = 2 [default = 2.2];
  }

  message Scale {
    optional FloatTextureParameter tex1 = 1;
    optional FloatTextureParameter tex2 = 2;
  }

  message Windy {
    // Empty Message
  }

  message Wrinkled {
    optional int32 octaves = 1 [default = 8];
    optional double roughness = 2 [default = 0.5];
  }

  // If none of these fields are set, the directive should be ignored and have
  // no impact.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1209
  oneof float_texture_type {
    Bilerp bilerp = 2;
    Checkerboard2D checkerboard2d = 3;
    Checkerboard3D checkerboard3d = 4;
    Constant constant = 5;
    Dots dots = 6;
    FBm fbm = 7;
    ImageMap imagemap = 8;
    Marble marble = 9;
    Mix mix = 10;
    Ptex ptex = 11;
    Scale scale = 12;
    Windy windy = 13;
    Wrinkled wrinkled = 14;
  }
}

message Identity {
  // Empty Message
}

message Include {
  required string path = 1;
}

message Integrator {
  enum LightSampleStrategy {
    SPATIAL = 0;
    POWER = 1;
    UNIFORM = 2;
  }

  message PixelBounds {
    required int32 x_min = 1;
    required int32 x_max = 2;
    required int32 y_min = 3;
    required int32 y_max = 4;
  }

  message AmbientOcclusion {
    optional bool cossample = 1 [default = true];
    optional int32 nsamples = 2 [default = 64];
    optional PixelBounds pixelbounds = 3;
  }

  message Bdpt {
    optional int32 maxdepth = 1 [default = 5];
    optional bool visualizestrategies = 2 [default = false];
    optional bool visualizeweights = 3 [default = false];
    optional LightSampleStrategy lightsamplestrategy = 4 [default = POWER];
    optional PixelBounds pixelbounds = 5;
  }

  message DirectLighting {
    enum Strategy {
      ALL = 0;
      ONE = 1;
    }

    optional int32 maxdepth = 1 [default = 5];
    optional Strategy strategy = 2 [default = ALL];
    optional PixelBounds pixelbounds = 3;
  }

  message Mlt {
    optional int32 maxdepth = 1 [default = 5];
    optional int32 bootstrapsamples = 2 [default = 100000];
    optional int32 chains = 3 [default = 1000];
    optional int32 mutationsperpixel = 4 [default = 100];
    optional double largestepprobability = 5 [default = 0.3];
    optional double sigma = 6 [default = 0.01];
  }

  message Path {
    optional int32 maxdepth = 1 [default = 5];
    optional double rrthreshold = 2 [default = 1.0];
    optional LightSampleStrategy lightsamplestrategy = 3 [default = SPATIAL];
    optional PixelBounds pixelbounds = 4;
  }

  message Sppm {
    optional int32 maxdepth = 1 [default = 5];
    optional int32 numiterations = 2 [default = 64];
    optional int32 photonsperiteration = 3 [default = -1];
    optional int32 imagewritefrequency = 4 [default = -2147483648];
    optional double radius = 5 [default = 1.0];
  }

  message VolPath {
    optional int32 maxdepth = 1 [default = 5];
    optional double rrthreshold = 2 [default = 1.0];
    optional LightSampleStrategy lightsamplestrategy = 3 [default = SPATIAL];
    optional PixelBounds pixelbounds = 4;
  }

  message Whitted {
    optional int32 maxdepth = 1 [default = 5];
    optional PixelBounds pixelbounds = 2;
  }

  // If attempting to render to a Film that does not have one of these fields
  // set, the renderer should render a black image.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1619
  oneof integrator_type {
    AmbientOcclusion ambientocclusion = 1;
    Bdpt bdpt = 2;
    DirectLighting directlighting = 3;
    Mlt mlt = 4;
    Path path = 5;
    Sppm sppm = 6;
    VolPath volpath = 7;
    Whitted whitted = 8;
  }
}

message MakeNamedMaterial {
  required string name = 1;
  required Material material = 2;
}

message MakeNamedMedium {
  message Homogeneous {
    optional MeasuredSubsurface preset = 1 [default = WHOLEMILK];
    optional Spectrum sigma_a = 2;
    optional Spectrum sigma_s = 3;
    optional double g = 4 [default = 0.0];
    optional double scale = 5 [default = 1.0];
  }

  message Heterogeneous {
    optional MeasuredSubsurface preset = 1 [default = WHOLEMILK];
    optional Spectrum sigma_a = 2;
    optional Spectrum sigma_s = 3;
    optional double g = 4 [default = 0.0];
    optional double scale = 5 [default = 1.0];
    optional Point p0 = 6;
    optional Point p1 = 7;
    optional int32 nx = 8 [default = 1];
    optional int32 ny = 9 [default = 1];
    optional int32 nz = 10 [default = 1];
    repeated double density = 11;  // Must check size == nx * ny * nz
  }

  required string name = 1;

  // If none of these fields are set, the directive should be ignored and have
  // no impact.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1097
  oneof medium_type {
    Homogeneous homogeneous = 2;
    Heterogeneous heterogeneous = 3;
  }
}

message Material {
  message Disney {
    optional SpectrumTextureParameter color = 1;
    optional FloatTextureParameter anisotropic = 2;
    optional FloatTextureParameter clearcoat = 3;
    optional FloatTextureParameter clearcoatgloss = 4;
    optional FloatTextureParameter eta = 5;
    optional FloatTextureParameter metallic = 6;
    optional FloatTextureParameter roughness = 7;
    optional SpectrumTextureParameter scatterdistance = 8;
    optional FloatTextureParameter sheen = 9;
    optional FloatTextureParameter sheentint = 10;
    optional FloatTextureParameter spectrans = 11;
    optional FloatTextureParameter speculartint = 12;
    optional bool thin = 13 [default = false];
    optional FloatTextureParameter difftrans = 14;
    optional FloatTextureParameter flatness = 15;
    optional FloatTextureParameter bumpmap = 16;
  }

  message Fourier {
    optional string bsdffile = 1 [default = ""];
    optional FloatTextureParameter bumpmap = 2;
  }

  message Glass {
    optional SpectrumTextureParameter Kr = 1;
    optional SpectrumTextureParameter Kt = 2;
    optional FloatTextureParameter eta = 3;
    optional FloatTextureParameter uroughness = 4;
    optional FloatTextureParameter vroughness = 5;
    optional bool remaproughness = 7 [default = true];
    optional FloatTextureParameter bumpmap = 8;
  }

  message Hair {
    optional SpectrumTextureParameter sigma_a = 1; // Must check
    optional SpectrumTextureParameter color = 2; // Must check
    optional FloatTextureParameter eumelanin = 3;
    optional FloatTextureParameter pheomelanin = 4;
    optional FloatTextureParameter eta = 5;
    optional FloatTextureParameter beta_m = 6;
    optional FloatTextureParameter beta_n = 7;
    optional FloatTextureParameter alpha = 8;
    optional FloatTextureParameter bumpmap = 9;
  }

  message KdSubsurface {
    optional SpectrumTextureParameter Kd = 1;
    optional FloatTextureParameter mfp = 2;
    optional SpectrumTextureParameter Kr = 3;
    optional SpectrumTextureParameter Kt = 4;
    optional FloatTextureParameter uroughness = 5;
    optional FloatTextureParameter vroughness = 6;
    optional double eta = 7 [default = 1.33];
    optional double scale = 8 [default = 1.0];
    optional double g = 9 [default = 0.0];
    optional bool remaproughness = 10 [default = true];
    optional FloatTextureParameter bumpmap = 11;
  }

  message Matte {
    optional SpectrumTextureParameter Kd = 1;
    optional FloatTextureParameter sigma = 2;
    optional FloatTextureParameter bumpmap = 3;
  }

  message Metal {
    optional SpectrumTextureParameter eta = 1;
    optional SpectrumTextureParameter k = 2;
    optional FloatTextureParameter roughness = 3;
    optional FloatTextureParameter uroughness = 4;
    optional FloatTextureParameter vroughness = 5;
    optional bool remaproughness = 6 [default = true];
    optional FloatTextureParameter bumpmap = 7;
  }

  message Mirror {
    optional SpectrumTextureParameter Kr = 1;
    optional FloatTextureParameter bumpmap = 2;
  }

  message Mix {
    optional FloatTextureParameter amount = 1;
    optional string namedmaterial1 = 2 [default = ""];
    optional string namedmaterial2 = 3 [default = ""];
  }

  message Plastic {
    optional SpectrumTextureParameter Kd = 1;
    optional SpectrumTextureParameter Ks = 2;
    optional FloatTextureParameter roughness = 3;
    optional bool remaproughness = 4 [default = true];
    optional FloatTextureParameter bumpmap = 5;
  }

  message Substrate {
    optional SpectrumTextureParameter Kd = 1;
    optional SpectrumTextureParameter Ks = 2;
    optional FloatTextureParameter uroughness = 3;
    optional FloatTextureParameter vroughness = 4;
    optional bool remaproughness = 5 [default = true];
    optional FloatTextureParameter bumpmap = 6;
  }

  message Subsurface {
    optional MeasuredSubsurface name = 1;
    optional SpectrumTextureParameter sigma_a = 2;
    optional SpectrumTextureParameter sigma_s = 3;
    optional double g = 4 [default = 0.0];  // Must be explicitly cleared if name is set
    optional double scale = 5 [default = 1.0];
    optional double eta = 6 [default = 1.33];
    optional SpectrumTextureParameter Kr = 7;
    optional SpectrumTextureParameter Kt = 8;
    optional FloatTextureParameter uroughness = 9;
    optional FloatTextureParameter vroughness = 10;
    optional bool remaproughness = 11 [default = true];
    optional FloatTextureParameter bumpmap = 12;
  }

  message Translucent {
    optional SpectrumTextureParameter Kd = 1;
    optional SpectrumTextureParameter Ks = 2;
    optional SpectrumTextureParameter reflect = 3;
    optional SpectrumTextureParameter transmit = 4;
    optional FloatTextureParameter roughness = 5;
    optional bool remaproughness = 6 [default = true];
    optional FloatTextureParameter bumpmap = 7;
  }

  message Uber {
    optional SpectrumTextureParameter Kd = 1;
    optional SpectrumTextureParameter Ks = 2;
    optional SpectrumTextureParameter Kr = 3;
    optional SpectrumTextureParameter Kt = 4;
    optional FloatTextureParameter roughness = 5;
    optional FloatTextureParameter uroughness = 6;  // Must check
    optional FloatTextureParameter vroughness = 7;  // Must check
    optional FloatTextureParameter eta = 8;
    optional FloatTextureParameter opacity = 9;
    optional bool remaproughness = 10 [default = true];
    optional FloatTextureParameter bumpmap = 11;
  }

  // If none of these fields are set, surfaces with this material applied should
  // be ignored during ray intersections. 
  oneof material_type {
    Disney disney = 1;
    Fourier fourier = 2;
    Glass glass = 3;
    Hair hair = 4;
    KdSubsurface kdsubsurface = 5;
    Matte matte = 6;
    Metal metal = 7;
    Mirror mirror = 8;
    Mix mix = 9;
    Plastic plastic = 10;
    Substrate substrate = 11;
    Subsurface subsurface = 12;
    Translucent translucent = 13;
    Uber uber = 14;
  }
}

message MediumInterface {
  required string inside = 1;
  required string outside = 2;
}

message NamedMaterial {
  required string name = 1;
}

message LightSource {
  message Distant {
    optional Spectrum L = 1;
    optional pbrt_proto.v3.Point from = 2;
    optional pbrt_proto.v3.Point to = 3;
    optional Spectrum scale = 4;
  }

  message Goniometric {
    optional Spectrum I = 1;
    optional string mapname = 2 [default = ""];
    optional Spectrum scale = 3;
  }

  message Infinite {
    optional Spectrum L = 1;
    optional int32 samples = 2 [default = 1];
    optional string mapname = 3 [default = ""];
    optional Spectrum scale = 4;
  }

  message Point {
    optional Spectrum L = 1;
    optional pbrt_proto.v3.Point from = 2;
    optional Spectrum scale = 3;
  }

  message Projection {
    optional Spectrum I = 1;
    optional double fov = 2 [default = 45.0];
    optional string mapname = 3 [default = ""];
    optional Spectrum scale = 4;
  }

  message Spot {
    optional Spectrum I = 1;
    optional pbrt_proto.v3.Point from = 2;
    optional pbrt_proto.v3.Point to = 3;
    optional double coneangle = 4 [default = 30.0];
    optional double conedeltaangle = 5 [default = 5.0];
    optional Spectrum scale = 6;
  }

  // If none of these fields are set, the directive should be ignored and have
  // no impact.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1306
  oneof light_source_type {
    Distant distant = 1;
    Goniometric goniometric = 2;
    Infinite infinite = 3;
    Point point = 4;
    Projection projection = 5;
    Spot spot = 6;
  }
}

message LookAt {
  required double eye_x = 1;
  required double eye_y = 2;
  required double eye_z = 3;
  required double look_x = 4;
  required double look_y = 5;
  required double look_z = 6;
  required double up_x = 7;
  required double up_y = 8;
  required double up_z = 9;
}

message ObjectBegin {
  required string name = 1;
}

message ObjectEnd {
  // Empty Message
}

message ObjectInstance {
  required string name = 1;
}

message ReverseOrientation {
  // Empty Message
}

message Rotate {
  required double angle = 1;
  required double x = 2;
  required double y = 3;
  required double z = 4;
}

message Sampler {
  message Halton {
    optional int32 pixelsamples = 1 [default = 16];
    optional bool samplepixelcenter = 2 [default = false];
  }

  message MaxMinDist {
    optional int32 pixelsamples = 1 [default = 16];
    optional int32 dimensions = 2 [default = 4];
  }

  message Random {
    optional int32 pixelsamples = 1 [default = 4];
  }

  message Sobol {
    optional int32 pixelsamples = 1 [default = 16];
  }

  message Stratified {
    optional bool jitter = 1 [default = true];
    optional int32 xsamples = 2 [default = 4];
    optional int32 ysamples = 3 [default = 4];
    optional int32 dimensions = 4 [default = 4];
  }

  message ZeroTwoSequence {
    optional int32 pixelsamples = 1 [default = 16];
    optional int32 dimensions = 2 [default = 4];
  }

  // If attempting to render to a Sampler that does not have one of these fields
  // set, the renderer should render a black image.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1671
  oneof sampler_type {
    Halton halton = 1;
    MaxMinDist maxmindist = 2;
    Random random = 3;
    Sobol sobol = 4;
    Stratified stratified = 5;
    ZeroTwoSequence zerotwosequence = 6;
  }
}

message Scale {
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message Shape {
  message Cone {
    optional double radius = 1 [default = 1.0];
    optional double height = 2 [default = 1.0];
    optional double phimax = 3 [default = 360.0];
  }

  message Curve {
    enum Basis {
      BEZIER = 1;
      BSPLINE = 2;
    }

    enum Type {
      CYLINDER = 1;
      FLAT = 2;
      RIBBON = 3;
    }

    message Normals {
      required Vector n0 = 1;
      required Vector n1 = 2;
    }

    // If using pbrt_proto::v3::Canonicalize, width0 and width1 will be filled
    // with the value from width if not set.
    repeated Point P = 1;
    optional Basis basis = 2 [default = BEZIER];
    optional int32 degree = 3 [default = 3];
    optional Type type = 4 [default = FLAT];
    repeated Vector N = 5;
    optional double width = 6 [default = 1.0];
    optional double width0 = 7;  // Must check
    optional double width1 = 8;  // Must check
    optional int32 splitdepth = 9 [default = 3];
  }

  message Cylinder {
    optional double radius = 1 [default = 1.0];
    optional double zmin = 2 [default = -1.0];
    optional double zmax = 3 [default = 1.0];
    optional double phimax = 4 [default = 360.0];
  }

  message Disk {
    optional double height = 1 [default = 0.0];
    optional double radius = 2 [default = 1.0];
    optional double innerradius = 3 [default = 0.0];
    optional double phimax = 4 [default = 360.0];
  }

  message HeightField {
    optional int32 nu = 1;
    optional int32 nv = 2;
    repeated double Pz = 3;
  }

  message Hyperboloid {
    optional Point p1 = 1;
    optional Point p2 = 2;
    optional double phimax = 3 [default = 360.0];
  }

  message LoopSubdiv {
    message VertexIndices {
      required int32 v0 = 1;
      required int32 v1 = 2;
      required int32 v2 = 3;
    }

    optional int32 levels = 1 [default = 3];
    repeated VertexIndices indices = 2;
    repeated Point P = 3;
  }

  message Nurbs {
    message PointWithWeight {
      required Point p = 1;
      required double weight = 2;
    }

    optional int32 nu = 1;
    optional int32 nv = 2;
    optional int32 uorder = 3;
    optional int32 vorder = 4;
    repeated float uknots = 5;
    repeated float vknots = 6;
    optional double u0 = 7;
    optional double v0 = 9;
    optional double u1 = 10;
    optional double v1 = 11;
    repeated Point P = 12;
    repeated PointWithWeight Pw = 13;
  }

  message Paraboloid {
    optional double radius = 1 [default = 1.0];
    optional double zmin = 2 [default = 0.0];
    optional double zmax = 3 [default = 1.0];
    optional double phimax = 4 [default = 360.0];
  }

  message PlyMesh {
    optional string filename = 1 [default = ""];
    optional FloatTextureParameter alpha = 2;
    optional FloatTextureParameter shadowalpha = 3;
  }

  message Sphere {
    optional double radius = 1 [default = 1.0];
    optional double zmin = 2;  // Must check
    optional double zmax = 3;  // Must check
    optional double phimax = 4 [default = 360.0];
  }

  message TriangleMesh {
    message VertexIndices {
      required int32 v0 = 1;
      required int32 v1 = 2;
      required int32 v2 = 3;
    }

    message UVCoordinate {
      required double u = 1;
      required double v = 2;
    }

    repeated VertexIndices indices = 1;
    repeated Point P = 2;
    repeated Vector N = 3;
    repeated Vector S = 4;
    repeated UVCoordinate uv = 5;
    repeated int32 faceIndices = 6;
    optional FloatTextureParameter alpha = 7;
    optional FloatTextureParameter shadowalpha = 8;
  }

  // If none of these fields are set, the directive should be ignored and have
  // no impact.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1345
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1373
  oneof shape_type {
    Cone cone = 1;
    Curve curve = 2;
    Cylinder cylinder = 3;
    Disk disk = 4;
    HeightField heightfield = 5;
    Hyperboloid hyperboloid = 6;
    LoopSubdiv loopsubdiv = 7;
    Nurbs nurbs = 8;
    Paraboloid paraboloid = 9;
    PlyMesh plymesh = 10;
    Sphere sphere = 11;
    TriangleMesh trianglemesh = 12;
  }

  message MaterialOverrides {
    message Eta {
      optional double as_value = 1;
      optional FloatTextureParameter as_float_texture = 2;
      optional SpectrumTextureParameter as_spectrum_texture = 3;
    }

    optional bool remaproughness = 1;
    optional bool thin = 2;
    optional double g = 3;
    optional double scale = 4;
    optional FloatTextureParameter alpha = 5;
    optional FloatTextureParameter amount = 6;
    optional FloatTextureParameter anisotropic = 7;
    optional FloatTextureParameter beta_m = 8;
    optional FloatTextureParameter beta_n = 9;
    optional FloatTextureParameter bumpmap = 10;
    optional FloatTextureParameter clearcoat = 11;
    optional FloatTextureParameter clearcoatgloss = 12;
    optional FloatTextureParameter difftrans = 13;
    optional FloatTextureParameter eumelanin = 14;
    optional FloatTextureParameter flatness = 15;
    optional FloatTextureParameter metallic = 16;
    optional FloatTextureParameter mfp = 17;
    optional FloatTextureParameter opacity = 18;
    optional FloatTextureParameter pheomelanin = 19;
    optional FloatTextureParameter roughness = 20;
    optional FloatTextureParameter sheen = 21;
    optional FloatTextureParameter sheentint = 22;
    optional FloatTextureParameter sigma = 23;
    optional FloatTextureParameter spectrans = 24;
    optional FloatTextureParameter speculartint = 25;
    optional FloatTextureParameter uroughness = 26;
    optional FloatTextureParameter vroughness = 27;
    optional MeasuredSubsurface name = 28;
    optional SpectrumTextureParameter color = 29;
    optional SpectrumTextureParameter k = 30;
    optional SpectrumTextureParameter Kd = 31;
    optional SpectrumTextureParameter Kr = 32;
    optional SpectrumTextureParameter Ks = 33;
    optional SpectrumTextureParameter Kt = 34;
    optional SpectrumTextureParameter reflect = 35;
    optional SpectrumTextureParameter scatterdistance = 36;
    optional SpectrumTextureParameter sigma_a = 37;
    optional SpectrumTextureParameter sigma_s = 38;
    optional SpectrumTextureParameter transmit = 39;
    optional string bsdffile = 40;
    optional string namedmaterial1 = 41;
    optional string namedmaterial2 = 42;
    optional Eta eta = 43;
  }

  optional MaterialOverrides overrides = 13;
}

message SpectrumTexture {
  required string name = 1;

  message Bilerp {
    optional SpectrumTextureParameter v00 = 1;
    optional SpectrumTextureParameter v01 = 2;
    optional SpectrumTextureParameter v10 = 3;
    optional SpectrumTextureParameter v11 = 4;
    optional Mapping2D mapping = 5 [default = UV];
    optional double uscale = 6 [default = 1.0];
    optional double vscale = 7 [default = 1.0];
    optional double udelta = 8 [default = 0.0];
    optional double vdelta = 9 [default = 0.0];
    optional Vector v1 = 10;
    optional Vector v2 = 11;
  }

  message Checkerboard2D {
    optional SpectrumTextureParameter tex1 = 1;
    optional SpectrumTextureParameter tex2 = 2;
    optional AntialiasingMode aamode = 3 [default = CLOSEDFORM];
    optional Mapping2D mapping = 4 [default = UV];
    optional double uscale = 5 [default = 1.0];
    optional double vscale = 6 [default = 1.0];
    optional double udelta = 7 [default = 0.0];
    optional double vdelta = 8 [default = 0.0];
    optional Vector v1 = 9;
    optional Vector v2 = 10;
  }

  message Checkerboard3D {
    optional SpectrumTextureParameter tex1 = 1;
    optional SpectrumTextureParameter tex2 = 2;
  }

  message Constant {
    optional SpectrumTextureParameter value = 1;
  }

  message Dots {
    optional SpectrumTextureParameter inside = 1;
    optional SpectrumTextureParameter outside = 2;
    optional Mapping2D mapping = 3 [default = UV];
    optional double uscale = 4 [default = 1.0];
    optional double vscale = 5 [default = 1.0];
    optional double udelta = 6 [default = 0.0];
    optional double vdelta = 7 [default = 0.0];
    optional Vector v1 = 8;
    optional Vector v2 = 9;
  }

  message FBm {
    optional int32 octaves = 1 [default = 8];
    optional double roughness = 2 [default = 0.5];
  }

  message ImageMap {
    optional string filename = 1 [default = ""];
    optional ImageWrapping wrap = 2 [default = REPEAT];
    optional double maxanisotropy = 3 [default = 8.0];
    optional bool trilinear = 4 [default = false];
    optional double scale = 5 [default = 1.0];
    optional bool gamma = 6;  // Must check, default varies by filetype
    optional Mapping2D mapping = 7 [default = UV];
    optional double uscale = 8 [default = 1.0];
    optional double vscale = 9 [default = 1.0];
    optional double udelta = 10 [default = 0.0];
    optional double vdelta = 11 [default = 0.0];
    optional Vector v1 = 12;
    optional Vector v2 = 13;
  }

  message Marble {
    optional int32 octaves = 1 [default = 8];
    optional double roughness = 2 [default = 0.5];
    optional double scale = 3 [default = 1.0];
    optional double variation = 4 [default = 0.2];
  }

  message Mix {
    optional SpectrumTextureParameter tex1 = 1;
    optional SpectrumTextureParameter tex2 = 2;
    optional FloatTextureParameter amount = 3;
  }

  message Ptex {
    optional string filename = 1 [default = ""];
    optional double gamma = 2 [default = 2.2];
  }

  message Scale {
    optional SpectrumTextureParameter tex1 = 1;
    optional SpectrumTextureParameter tex2 = 2;
  }

  message Uv {
    optional Mapping2D mapping = 1 [default = UV];
    optional double uscale = 2 [default = 1.0];
    optional double vscale = 3 [default = 1.0];
    optional double udelta = 4 [default = 0.0];
    optional double vdelta = 5 [default = 0.0];
    optional Vector v1 = 6;
    optional Vector v2 = 7;
  }

  message Windy {
    // Empty Message
  }

  message Wrinkled {
    optional int32 octaves = 1 [default = 8];
    optional double roughness = 2 [default = 0.5];
  }

  // If none of these fields are set, the directive should be ignored and have
  // no impact.
  //
  // https://github.com/mmp/pbrt-v3/blob/13d871faae88233b327d04cda24022b8bb0093ee/src/core/api.cpp#L1227
  oneof spectrum_texture_type {
    Bilerp bilerp = 2;
    Checkerboard2D checkerboard2d = 3;
    Checkerboard3D checkerboard3d = 4;
    Constant constant = 5;
    Dots dots = 6;
    FBm fbm = 7;
    ImageMap imagemap = 8;
    Marble marble = 9;
    Mix mix = 10;
    Ptex ptex = 11;
    Scale scale = 12;
    Uv uv = 13;
    Windy windy = 14;
    Wrinkled wrinkled = 15;
  }
}

message Transform {
  required double m00 = 1;
  required double m01 = 2;
  required double m02 = 3;
  required double m03 = 4;
  required double m10 = 5;
  required double m11 = 6;
  required double m12 = 7;
  required double m13 = 8;
  required double m20 = 9;
  required double m21 = 10;
  required double m22 = 11;
  required double m23 = 12;
  required double m30 = 13;
  required double m31 = 14;
  required double m32 = 15;
  required double m33 = 16;
}

message TransformBegin {
  // Empty Message
}

message TransformEnd {
  // Empty Message
}

message TransformTimes {
  required double start_time = 1;
  required double end_time = 2;
}

message Translate {
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message WorldBegin {
  // Empty Message
}

message WorldEnd {
  // Empty Message
}

message Directive {
  oneof directive_type {
    Accelerator accelerator = 1;
    ActiveTransform active_transform = 2;
    AreaLightSource area_light_source = 3;
    AttributeBegin attribute_begin = 4;
    AttributeEnd attribute_end = 5;
    Camera camera = 6;
    ConcatTransform concat_transform = 7;
    CoordinateSystem coordinate_system = 8;
    CoordSysTransform coord_sys_transform = 9;
    Film film = 10;
    Filter filter = 11;
    FloatTexture float_texture = 12;
    Identity identity = 13;
    Include include = 14;
    Integrator integrator = 15;
    LightSource light_source = 16;
    LookAt look_at = 17;
    MakeNamedMaterial make_named_material = 18;
    MakeNamedMedium make_named_medium = 19;
    Material material = 20;
    MediumInterface medium_interface = 21;
    NamedMaterial named_material = 22;
    ObjectBegin object_begin = 23;
    ObjectEnd object_end = 24;
    ObjectInstance object_instance = 25;
    ReverseOrientation reverse_orientation = 26;
    Rotate rotate = 27;
    Sampler sampler = 28;
    Shape shape = 29;
    Scale scale = 30;
    SpectrumTexture spectrum_texture = 31;
    Transform transform = 32;
    TransformBegin transform_begin = 33;
    TransformEnd transform_end = 34;
    TransformTimes transform_times = 35;
    Translate translate = 36;
    WorldBegin world_begin = 37;
    WorldEnd world_end = 38;
  }
}

message PbrtProto {
  repeated Directive directives = 1;
}
