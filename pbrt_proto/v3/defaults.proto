syntax = "proto2";

import "pbrt_proto/v3/pbrt.proto";

package pbrt_proto.v3;

// This protocol buffer represents the structure of the static data that is
// needed for parsing PBRT Proto v3 inputs.
//
// For each directive with provided defaults, the expected usage is that the
// renderer will first read its own input then merge the values from these
// defaults into that proto. If there is no default for the type provide here,
// then the parsed proto can be used directly.
message Defaults {
  // This field contains the set of scene defaults that PBRT defines for scenes
  // such as the default accelerator, the default camera, etc. When parsing a
  // PBRT Proto model, these defaults can be fed into the parser ahead of the
  // model being renderered to configure these bits of global state. Then the
  // model is free to override them if required.
  //
  // This field is guaranteed to provide an Accelerator, a Camera, a Film, a
  // Filter, an Integrator, and a Sampler; however, their order and type (while
  // static) are not defined as part of this interface.
  required PbrtProto global_defaults = 1;

  // This field contains the default material to use if none is specified. This
  // cannot be part of global_defaults because materials cannot be specified
  // before the WorldBegin directive.
  required Material default_material = 2;

  // A container for the default values for every type of AreaLightSource
  message DefaultAreaLightSources {
    // The default "diffuse" AreaLightSource
    required AreaLightSource.Diffuse diffuse = 1;
  }

  // The default values for every type of AreaLightSource
  required DefaultAreaLightSources area_light_sources = 3;

  // A container for the default values for every type of Film
  message DefaultFilms {
    // The default "image" Film
    required Film.Image image = 1;
  }

  // The default values for every type of Film
  required DefaultFilms films = 4;

  // A container for the default values for every type of FloatTexture
  message DefaultFloatTextures {
    // The default "bilerp" FloatTexture
    required FloatTexture.Bilerp bilerp = 1;

    // The default 2D "checkerboard" FloatTexture
    required FloatTexture.Checkerboard2D checkerboard2d = 2;

    // The default 3D "checkerboard" FloatTexture
    required FloatTexture.Checkerboard2D checkerboard3d = 3;

    // The default "constant" FloatTexture
    required FloatTexture.Constant constant = 4;

    // The default "dots" FloatTexture
    required FloatTexture.Dots dots = 5;

    // The default "fbm" FloatTexture is fully captured in its definition
    reserved 6;

    // The default "imagemap" FloatTexture
    required FloatTexture.ImageMap imagemap = 7;

    // The default "marble" FloatTexture is fully captured in its definition
    reserved 8;

    // The default "mix" FloatTexture
    required FloatTexture.Mix mix = 9;

    // The default "ptex" FloatTexture is fully captured in its definition
    reserved 10;

    // The default "scale" FloatTexture
    required FloatTexture.Scale scale = 11;

    // The default "windy" FloatTexture is fully captured in its definition
    reserved 12;

    // The default "wrinkled" FloatTexture is fully captured in its definition
    reserved 13;
  }

  // The default values for every type of FloatTexture
  required DefaultFloatTextures float_textures = 5;

  // A container for the default values for every type of Material
  message DefaultMaterials {
    // The default "disney" Material
    required Material.Disney disney = 1;

    // The default "fourier" Material is fully captured in its definition
    reserved 2;

    // The default "glass" Material
    required Material.Glass glass = 3;

    // The default "hair" Material
    required Material.Hair hair = 4;

    // The default "kdsubsurface" Material
    required Material.KdSubsurface kdsubsurface = 5;

    // The default "matte" Material
    required Material.Matte matte = 6;

    // The default "metal" Material
    required Material.Metal metal = 7;

    // The default "mirror" Material
    required Material.Mirror mirror = 8;

    // The default "mix" Material
    required Material.Mix mix = 9;

    // The default "plastic" Material
    required Material.Plastic plastic = 10;

    // The default "substrate" Material
    required Material.Substrate substrate = 11;
  
    // The default "subsurface" Material for every MeasuredSubsurface
    // 
    // NOTE: Protocol Buffers do not allow enums to be used directly as map
    //       keys, so int32 is used here as the key type instead. Every value in
    //       MeasuredSubsurface is guaranteed to be present in this map.
    map<int32, Material.Subsurface> subsurfaces = 12;

    // The default "translucent" Material
    required Material.Translucent translucent = 13;

    // The default "uber" Material
    required Material.Uber uber = 14;
  }

  // The default values for every type of Material
  required DefaultMaterials materials = 6;

  // A container for the default values for every type of Medium
  message DefaultMedia {
    // The default "homogeneous" Medium for every MeasuredSubsurface
    // 
    // NOTE: Protocol Buffers do not allow enums to be used directly as map
    //       keys, so int32 is used here as the key type instead. Every value in
    //       MeasuredSubsurface is guaranteed to be present in this map.
    map<int32, MakeNamedMedium.Homogeneous> homogeneous = 1;
 
    // The default "heterogeneous" Medium for every MeasuredSubsurface
    // 
    // NOTE: Protocol Buffers do not allow enums to be used directly as map
    //       keys, so int32 is used here as the key type instead. Every value in
    //       MeasuredSubsurface is guaranteed to be present in this map.
    map<int32, MakeNamedMedium.Heterogeneous> heterogeneous = 2;
  }

  // The default values for every type of Medium
  required DefaultMedia media = 7;

  // A container for the default values for every type of LightSource
  message DefaultLightSources {
    // The default "distant" LightSource
    required LightSource.Distant distant = 1;

    // The default "goniometric" LightSource
    required LightSource.Goniometric goniometric = 2;

    // The default "infinite" LightSource
    required LightSource.Infinite infinite = 3;

    // The default "point" LightSource
    required LightSource.Point point = 4;

    // The default "projection" LightSource
    required LightSource.Projection projection = 5;

    // The default "spot" LightSource
    required LightSource.Spot spot = 6;
  }

  // The default values for every type of LightSource
  required DefaultLightSources light_sources = 8;

  // A container for the default values for every type of Shape
  message DefaultShapes {
    // The default "cone" Shape is fully captured in its definition
    reserved 1;

    // The default "curve" Shape is fully captured in its definition
    reserved 2;

    // The default "cylinder" Shape is fully captured in its definition
    reserved 3;

    // The default "disk" Shape is fully captured in its definition
    reserved 4;

    // The default "heightfield" Shape is fully captured in its definition
    reserved 5;

    // The default "heightfield" Shape
    required Shape.Hyperboloid hyperboloid = 6;

    // The default "loopsubdiv" Shape is fully captured in its definition
    reserved 7;

    // The default "nurbs" Shape is fully captured in its definition
    reserved 8;

    // The default "paraboloid" Shape is fully captured in its definition
    reserved 9;

    // The default "plymesh" Shape
    required Shape.PlyMesh plymesh = 10;

    // The default "sphere" Shape is fully captured in its definition
    reserved 11;

    // The default "trianglemesh" Shape
    required Shape.TriangleMesh trianglemesh = 12;
  }

  // The default values for every type of Shape
  required DefaultShapes shapes = 9;

  // A container for the default values for every type of SpectrumTexture
  message DefaultSpectrumTextures {
    // The default "bilerp" SpectrumTexture
    required SpectrumTexture.Bilerp bilerp = 1;

    // The default 2D "checkerboard" SpectrumTexture
    required SpectrumTexture.Checkerboard2D checkerboard2d = 2;

    // The default 3D "checkerboard" SpectrumTexture
    required SpectrumTexture.Checkerboard2D checkerboard3d = 3;

    // The default "constant" SpectrumTexture
    required SpectrumTexture.Constant constant = 4;

    // The default "dots" SpectrumTexture
    required SpectrumTexture.Dots dots = 5;

    // The default "fbm" SpectrumTexture is fully captured in its definition
    reserved 6;

    // The default "imagemap" SpectrumTexture
    required SpectrumTexture.ImageMap imagemap = 7;

    // The default "marble" SpectrumTexture is fully captured in its definition
    reserved 8;

    // The default "mix" SpectrumTexture
    required SpectrumTexture.Mix mix = 9;

    // The default "ptex" SpectrumTexture is fully captured in its definition
    reserved 10;

    // The default "scale" SpectrumTexture
    required SpectrumTexture.Scale scale = 11;

    // The default "uv" SpectrumTexture is fully captured in its definition
    required SpectrumTexture.Uv uv = 12;

    // The default "windy" SpectrumTexture is fully captured in its definition
    reserved 13;

    // The default "wrinkled" SpectrumTexture is fully captured in its
    // definition
    reserved 14;
  }

  // The default values for every type of SpectrumTexture
  required DefaultSpectrumTextures spectrum_textures = 10;
}
